:host {
    background-color: salmon;

    // таким образом мы может перебить стили дочернего host элемента, потому что уникальные аттрибуты для данного компонента, добавятся и для дочернего
    // .ParentEncapsulationComponent-ChildEncapsulationComponent {
        // background-color: red;

        // так сделать уже нельзя, потому что тэги дочернего(не хост, а именно уже содержимое) скрыто уникальными аттрибутами от нас
        // .ChildEncapsulationComponent__text {
        //     font-size: 25px;
        // }
    // }


    // таким образом мы как бы отключаем инкапсуляцию для вложенных компонентов в этот селектор
    ::ng-deep {

        .ChildEncapsulationComponent {
            color: yellow;
            padding: 20px;
        }

        .ChildEncapsulationComponent-ChildChildComponent {
            color: rebeccapurple;
            height: 300px;
            padding: 50px;
            border: 2px solid white;
        }

        .ChildChildComponent__text {
            font-size: 50px;
        }
    }


    // к своим классам компонента также можно получать доступ через ::ng-deep, но зачем, если такой же класс может быть где то ниже использоваться в дереве
    // ::ng-deep {

        // .ParentEncapsulationComponent {
        //     padding-top: 100px;
        //     color: white;
        // }
    // }
}


// если отключить инкапсуляцию для данного компонента, то мы может таким образом изменять самый самый вложенный компонент, эти стили будут никак не скрыты, они будут глобальными
// .ChildChildComponent {
//     color: orange;
// }

// ng-deep делает этот стиль глобальным для всего проекта. Если мы и используем его, то нужно все таки точечно указывать, в каком селекторе что нам нужно поправить, и лучше для каждого компонента использовать уникальный класс
:host {

    ::ng-deep {

        .same-class {
            color: white;
            box-shadow: 5px 5px 0 darkblue;
        }
    }
}